{
  "address": "BzUWmCR33ez1LvDfF2K9USe3Ra1Ws47WQ2ETCzebBkS6",
  "metadata": {
    "name": "launchpad",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "Created with Anchor"
  },
  "docs": [
    "# GAMING TERMINAL Launchpad Program",
    "",
    "A comprehensive memecoin launchpad protocol on Solana featuring:",
    "- Bonding curve token launches with fair price discovery",
    "- Automated market maker integration (Raydium CPMM)",
    "- Automatic migration at 80% threshold for deeper liquidity",
    "- Fair launch mechanics with built-in safeguards",
    "- Airdrop funds to designated recipient"
  ],
  "instructions": [
    {
      "name": "create_metadata",
      "docs": [
        "Creates token metadata for the launched memecoin",
        "",
        "# Arguments",
        "* `name` - Token name (e.g., \"Doge Coin\")",
        "* `symbol` - Token symbol (e.g., \"DOGE\")",
        "* `uri` - Metadata URI pointing to off-chain JSON with image/description"
      ],
      "discriminator": [
        30,
        35,
        117,
        134,
        196,
        139,
        44,
        25
      ],
      "accounts": [
        {
          "name": "sender",
          "writable": true,
          "signer": true
        },
        {
          "name": "pool"
        },
        {
          "name": "meme_mint",
          "writable": true
        },
        {
          "name": "meme_mpl_metadata",
          "docs": [
            "To store metaplex metadata. Created in the function scope"
          ],
          "writable": true
        },
        {
          "name": "pool_signer",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  105,
                  103,
                  110,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "metadata_program",
          "docs": [
            "Program to create NFT metadata"
          ],
          "address": "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        },
        {
          "name": "rent",
          "address": "SysvarRent111111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        },
        {
          "name": "uri",
          "type": "string"
        }
      ]
    },
    {
      "name": "get_swap_x_amt",
      "docs": [
        "Preview swap: selling meme tokens for SOL",
        "Returns expected amounts without executing trade",
        "",
        "# Arguments",
        "* `coin_in_amount` - Amount of meme tokens to sell",
        "* `coin_y_min_value` - Minimum SOL to receive (slippage protection)"
      ],
      "discriminator": [
        239,
        63,
        83,
        118,
        169,
        9,
        82,
        226
      ],
      "accounts": [
        {
          "name": "pool",
          "docs": [
            "The bonding pool account to calculate swap amounts for"
          ]
        },
        {
          "name": "quote_vault",
          "docs": [
            "The quote token vault, must match the pool's quote reserve vault"
          ]
        }
      ],
      "args": [
        {
          "name": "coin_in_amount",
          "type": "u64"
        },
        {
          "name": "coin_y_min_value",
          "type": "u64"
        }
      ]
    },
    {
      "name": "get_swap_y_amt",
      "docs": [
        "Preview swap: buying meme tokens with SOL",
        "Returns expected amounts without executing trade",
        "",
        "# Arguments",
        "* `coin_in_amount` - Amount of SOL to spend",
        "* `coin_x_min_value` - Minimum meme tokens to receive (slippage protection)"
      ],
      "discriminator": [
        81,
        86,
        3,
        150,
        71,
        68,
        65,
        241
      ],
      "accounts": [
        {
          "name": "pool"
        },
        {
          "name": "quote_vault"
        }
      ],
      "args": [
        {
          "name": "coin_in_amount",
          "type": "u64"
        },
        {
          "name": "coin_x_min_value",
          "type": "u64"
        }
      ]
    },
    {
      "name": "init_target_config",
      "docs": [
        "Initializes the target configuration for the pool",
        "",
        "# Arguments",
        "* `token_target_amount` - The target amount of tokens (in lamports/smallest unit)"
      ],
      "discriminator": [
        7,
        211,
        172,
        243,
        19,
        147,
        55,
        43
      ],
      "accounts": [
        {
          "name": "creator",
          "docs": [
            "The creator account that pays for and signs the initialization"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "target_config",
          "docs": [
            "The target configuration account being created"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                "kind": "account",
                "path": "token_mint"
              },
              {
                "kind": "account",
                "path": "pair_token_mint"
              }
            ]
          }
        },
        {
          "name": "token_mint",
          "docs": [
            "The token mint this target config is associated with (e.g., WSOL)"
          ]
        },
        {
          "name": "pair_token_mint",
          "docs": [
            "The meme mint this target config is associated with (e.g., DOG)"
          ]
        },
        {
          "name": "system_program",
          "docs": [
            "The system program for account creation"
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "token_target_amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "migrate_to_raydium",
      "docs": [
        "ðŸŒŸ Migrate bonding curve liquidity to Raydium CPMM",
        "",
        "Graduates the bonding curve to a full AMM when threshold is reached:",
        "- Triggers when 80% of trading tokens are sold (552M/690M)",
        "- Creates new Raydium CPMM pool via official CPI",
        "- Migrates 95% of remaining liquidity to AMM",
        "- Keeps 5% for continued bonding curve trading",
        "- Enables deeper liquidity and price stability",
        "",
        "# Migration Process",
        "1. Validates 80% threshold reached",
        "2. Locks bonding curve pool",
        "3. Transfers tokens to creator accounts",
        "4. Calls Raydium CPMM initialize via CPI",
        "5. Updates pool state and emits event",
        "# Requirements",
        "- Pool must have reached 80% sell threshold",
        "- Pool must not be already migrated",
        "- Meme token key must be < quote token key (Raydium requirement)",
        "- All Raydium accounts properly derived"
      ],
      "discriminator": [
        116,
        139,
        75,
        192,
        86,
        63,
        121,
        169
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "cp_swap_program",
          "docs": [
            "Raydium CPMM program (must be declared early to be referenced in other constraints)"
          ],
          "address": "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          "name": "pool",
          "writable": true
        },
        {
          "name": "token_0_mint",
          "writable": true
        },
        {
          "name": "token_1_mint",
          "docs": [
            "Quote token mint (WSOL - must be larger key than meme_mint)"
          ],
          "writable": true
        },
        {
          "name": "pool_token_0_vault",
          "docs": [
            "Pool's meme token vault"
          ],
          "writable": true
        },
        {
          "name": "pool_token_1_vault",
          "docs": [
            "Pool's quote token vault"
          ],
          "writable": true
        },
        {
          "name": "pool_signer",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  105,
                  103,
                  110,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "creator_token_0_account",
          "docs": [
            "Creator's meme token account (for initial liquidity)"
          ],
          "writable": true
        },
        {
          "name": "creator_token_1_account",
          "docs": [
            "Creator's quote token account (for initial liquidity)"
          ],
          "writable": true
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "associated_token_program",
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "rent",
          "address": "SysvarRent111111111111111111111111111111111"
        },
        {
          "name": "amm_config"
        },
        {
          "name": "raydium_authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "raydium_pool_state",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "amm_config"
              },
              {
                "kind": "account",
                "path": "token_0_mint"
              },
              {
                "kind": "account",
                "path": "token_1_mint"
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "raydium_lp_mint",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  111,
                  111,
                  108,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "raydium_pool_state"
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "creator_lp_token",
          "writable": true
        },
        {
          "name": "token_0_vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "raydium_pool_state"
              },
              {
                "kind": "account",
                "path": "token_0_mint"
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "token_1_vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "raydium_pool_state"
              },
              {
                "kind": "account",
                "path": "token_1_mint"
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "create_pool_fee",
          "docs": [
            "Pool creation fee account"
          ],
          "writable": true,
          "address": "DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8"
        },
        {
          "name": "observation_state",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  111,
                  98,
                  115,
                  101,
                  114,
                  118,
                  97,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "raydium_pool_state"
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        }
      ],
      "args": []
    },
    {
      "name": "new_pool",
      "docs": [
        "Creates a new bonding curve pool for a memecoin launch",
        "",
        "# Arguments"
      ],
      "discriminator": [
        38,
        63,
        210,
        32,
        246,
        20,
        239,
        112
      ],
      "accounts": [
        {
          "name": "sender",
          "docs": [
            "The account of the sender initiating the pool creation."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "pool",
          "docs": [
            "The account representing the pool being created."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  98,
                  111,
                  117,
                  110,
                  100,
                  95,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "meme_mint"
              },
              {
                "kind": "account",
                "path": "quote_mint"
              }
            ]
          }
        },
        {
          "name": "meme_mint",
          "docs": [
            "The account representing the meme mint."
          ],
          "writable": true
        },
        {
          "name": "quote_vault",
          "docs": [
            "The account representing the quote vault."
          ]
        },
        {
          "name": "quote_mint",
          "docs": [
            "The account representing the quote mint."
          ]
        },
        {
          "name": "fee_quote_vault",
          "docs": [
            "The account representing the fee quote vault."
          ]
        },
        {
          "name": "meme_vault",
          "docs": [
            "The account representing the meme vault."
          ],
          "writable": true
        },
        {
          "name": "target_config",
          "docs": [
            "The account representing the target configuration."
          ]
        },
        {
          "name": "pool_signer",
          "docs": [
            "The account representing the pool signer."
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  105,
                  103,
                  110,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": [
            "The system program account."
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "token_program",
          "docs": [
            "The token program account."
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": []
    },
    {
      "name": "swap_x",
      "docs": [
        "Execute swap: sell meme tokens for SOL",
        "Uses direct token transfer with bonding curve pricing",
        "",
        "# Arguments",
        "* `coin_in_amount` - Amount of meme tokens to sell",
        "* `coin_y_min_value` - Minimum SOL to receive (slippage protection)"
      ],
      "discriminator": [
        65,
        63,
        86,
        168,
        233,
        191,
        123,
        134
      ],
      "accounts": [
        {
          "name": "pool",
          "writable": true
        },
        {
          "name": "meme_vault",
          "writable": true
        },
        {
          "name": "quote_vault",
          "writable": true
        },
        {
          "name": "user_meme",
          "writable": true
        },
        {
          "name": "user_sol",
          "writable": true
        },
        {
          "name": "owner",
          "signer": true
        },
        {
          "name": "pool_signer",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  105,
                  103,
                  110,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": [
        {
          "name": "coin_in_amount",
          "type": "u64"
        },
        {
          "name": "coin_y_min_value",
          "type": "u64"
        }
      ]
    },
    {
      "name": "swap_y",
      "docs": [
        "Execute swap: buy meme tokens with SOL",
        "Direct transfer to user's wallet + points rewards for referrers",
        "ðŸŒŸ Automatically triggers migration when 80% threshold reached",
        "",
        "# Arguments",
        "* `coin_in_amount` - Amount of SOL to spend",
        "* `coin_x_min_value` - Minimum meme tokens to receive (slippage protection)"
      ],
      "discriminator": [
        126,
        208,
        104,
        214,
        101,
        217,
        59,
        65
      ],
      "accounts": [
        {
          "name": "pool",
          "writable": true
        },
        {
          "name": "meme_vault",
          "writable": true
        },
        {
          "name": "quote_vault",
          "writable": true
        },
        {
          "name": "user_sol",
          "writable": true
        },
        {
          "name": "user_meme",
          "writable": true
        },
        {
          "name": "owner",
          "writable": true,
          "signer": true
        },
        {
          "name": "pool_signer_pda",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  105,
                  103,
                  110,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": [
        {
          "name": "coin_in_amount",
          "type": "u64"
        },
        {
          "name": "coin_x_min_value",
          "type": "u64"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "AmmConfig",
      "discriminator": [
        218,
        244,
        33,
        104,
        203,
        203,
        43,
        111
      ]
    },
    {
      "name": "BoundPool",
      "discriminator": [
        191,
        233,
        118,
        178,
        14,
        139,
        241,
        36
      ]
    },
    {
      "name": "TargetConfig",
      "discriminator": [
        83,
        195,
        212,
        193,
        86,
        39,
        66,
        235
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "MathOverflow"
    }
  ],
  "types": [
    {
      "name": "AmmConfig",
      "docs": [
        "Holds the current owner of the factory"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "Bump to identify PDA"
            ],
            "type": "u8"
          },
          {
            "name": "disable_create_pool",
            "docs": [
              "Status to control if new pool can be create"
            ],
            "type": "bool"
          },
          {
            "name": "index",
            "docs": [
              "Config index"
            ],
            "type": "u16"
          },
          {
            "name": "trade_fee_rate",
            "docs": [
              "The trade fee, denominated in hundredths of a bip (10^-6)"
            ],
            "type": "u64"
          },
          {
            "name": "protocol_fee_rate",
            "docs": [
              "The protocol fee"
            ],
            "type": "u64"
          },
          {
            "name": "fund_fee_rate",
            "docs": [
              "The fund fee, denominated in hundredths of a bip (10^-6)"
            ],
            "type": "u64"
          },
          {
            "name": "create_pool_fee",
            "docs": [
              "Fee for create a new pool"
            ],
            "type": "u64"
          },
          {
            "name": "protocol_owner",
            "docs": [
              "Address of the protocol fee owner"
            ],
            "type": "pubkey"
          },
          {
            "name": "fund_owner",
            "docs": [
              "Address of the fund fee owner"
            ],
            "type": "pubkey"
          },
          {
            "name": "padding",
            "docs": [
              "padding"
            ],
            "type": {
              "array": [
                "u64",
                16
              ]
            }
          }
        ]
      }
    },
    {
      "name": "BoundPool",
      "docs": [
        "Account struct representing a bonding curve pool"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "meme_reserve",
            "docs": [
              "Reserve account for meme tokens"
            ],
            "type": {
              "defined": {
                "name": "Reserve"
              }
            }
          },
          {
            "name": "quote_reserve",
            "docs": [
              "Reserve account for quote tokens (SOL)"
            ],
            "type": {
              "defined": {
                "name": "Reserve"
              }
            }
          },
          {
            "name": "admin_fees_meme",
            "docs": [
              "Admin fee balance for meme tokens"
            ],
            "type": "u64"
          },
          {
            "name": "admin_fees_quote",
            "docs": [
              "Admin fee balance for quote tokens"
            ],
            "type": "u64"
          },
          {
            "name": "fee_vault_quote",
            "docs": [
              "Public key of fee vault for quote tokens"
            ],
            "type": "pubkey"
          },
          {
            "name": "creator_addr",
            "docs": [
              "Public key of pool creator"
            ],
            "type": "pubkey"
          },
          {
            "name": "fees",
            "docs": [
              "Fee configuration"
            ],
            "type": {
              "defined": {
                "name": "Fees"
              }
            }
          },
          {
            "name": "config",
            "docs": [
              "Pool configuration parameters"
            ],
            "type": {
              "defined": {
                "name": "Config"
              }
            }
          },
          {
            "name": "locked",
            "docs": [
              "Flag indicating if pool is locked"
            ],
            "type": "bool"
          },
          {
            "name": "pool_migration",
            "docs": [
              "Flag indicating if pool has been migrated to a DEX"
            ],
            "type": "bool"
          },
          {
            "name": "migration_pool_key",
            "docs": [
              "Raydium pool public key (if migrated)"
            ],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "Config",
      "docs": [
        "Struct holding pool configuration parameters"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "alpha_abs",
            "docs": [
              "Positive slope value (alpha)"
            ],
            "type": "u128"
          },
          {
            "name": "beta",
            "docs": [
              "Positive beta value (y-intercept)"
            ],
            "type": "u128"
          },
          {
            "name": "price_factor_num",
            "docs": [
              "Price factor numerator"
            ],
            "type": "u64"
          },
          {
            "name": "price_factor_denom",
            "docs": [
              "Price factor denominator"
            ],
            "type": "u64"
          },
          {
            "name": "gamma_s",
            "docs": [
              "Maximum SOL amount in raw denomination"
            ],
            "type": "u64"
          },
          {
            "name": "gamma_m",
            "docs": [
              "Maximum meme token amount in raw denomination"
            ],
            "type": "u64"
          },
          {
            "name": "omega_m",
            "docs": [
              "Maximum LP token amount in raw denomination"
            ],
            "type": "u64"
          },
          {
            "name": "decimals",
            "docs": [
              "Decimal configuration values"
            ],
            "type": {
              "defined": {
                "name": "Decimals"
              }
            }
          }
        ]
      }
    },
    {
      "name": "Decimals",
      "docs": [
        "Struct holding decimal configuration values"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "alpha",
            "docs": [
              "Alpha decimal precision"
            ],
            "type": "u128"
          },
          {
            "name": "beta",
            "docs": [
              "Beta decimal precision (for positive intercept)"
            ],
            "type": "u128"
          },
          {
            "name": "quote",
            "docs": [
              "Quote token decimal precision"
            ],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "Fees",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "fee_meme_percent",
            "type": "u64"
          },
          {
            "name": "fee_quote_percent",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "Reserve",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "tokens",
            "type": "u64"
          },
          {
            "name": "mint",
            "type": "pubkey"
          },
          {
            "name": "vault",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "TargetConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "token_target_amount",
            "type": "u64"
          },
          {
            "name": "token_mint",
            "type": "pubkey"
          },
          {
            "name": "pair_token_mint",
            "type": "pubkey"
          }
        ]
      }
    }
  ]
}